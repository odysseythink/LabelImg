// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: api.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_api_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_api_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3011000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3011002 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_api_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_api_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[4]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_api_2eproto;
namespace pb {
class PK_PASCAL_VOC_ANNOTATION;
class PK_PASCAL_VOC_ANNOTATIONDefaultTypeInternal;
extern PK_PASCAL_VOC_ANNOTATIONDefaultTypeInternal _PK_PASCAL_VOC_ANNOTATION_default_instance_;
class PK_PASCAL_VOC_ANNOTATION_OBJ;
class PK_PASCAL_VOC_ANNOTATION_OBJDefaultTypeInternal;
extern PK_PASCAL_VOC_ANNOTATION_OBJDefaultTypeInternal _PK_PASCAL_VOC_ANNOTATION_OBJ_default_instance_;
class PK_PASCAL_VOC_SAVE_REQ;
class PK_PASCAL_VOC_SAVE_REQDefaultTypeInternal;
extern PK_PASCAL_VOC_SAVE_REQDefaultTypeInternal _PK_PASCAL_VOC_SAVE_REQ_default_instance_;
class PK_PASCAL_VOC_SAVE_RSP;
class PK_PASCAL_VOC_SAVE_RSPDefaultTypeInternal;
extern PK_PASCAL_VOC_SAVE_RSPDefaultTypeInternal _PK_PASCAL_VOC_SAVE_RSP_default_instance_;
}  // namespace pb
PROTOBUF_NAMESPACE_OPEN
template<> ::pb::PK_PASCAL_VOC_ANNOTATION* Arena::CreateMaybeMessage<::pb::PK_PASCAL_VOC_ANNOTATION>(Arena*);
template<> ::pb::PK_PASCAL_VOC_ANNOTATION_OBJ* Arena::CreateMaybeMessage<::pb::PK_PASCAL_VOC_ANNOTATION_OBJ>(Arena*);
template<> ::pb::PK_PASCAL_VOC_SAVE_REQ* Arena::CreateMaybeMessage<::pb::PK_PASCAL_VOC_SAVE_REQ>(Arena*);
template<> ::pb::PK_PASCAL_VOC_SAVE_RSP* Arena::CreateMaybeMessage<::pb::PK_PASCAL_VOC_SAVE_RSP>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace pb {

enum PK_PASCAL_VOC_ANNOTATION_OBJ_CMD_PASCAL_VOC_ANNOTATION_OBJ : int {
  PK_PASCAL_VOC_ANNOTATION_OBJ_CMD_PASCAL_VOC_ANNOTATION_OBJ_UNKNOWN = 0,
  PK_PASCAL_VOC_ANNOTATION_OBJ_CMD_PASCAL_VOC_ANNOTATION_OBJ_CMD = 168493057,
  PK_PASCAL_VOC_ANNOTATION_OBJ_CMD_PASCAL_VOC_ANNOTATION_OBJ_PK_PASCAL_VOC_ANNOTATION_OBJ_CMD_PASCAL_VOC_ANNOTATION_OBJ_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  PK_PASCAL_VOC_ANNOTATION_OBJ_CMD_PASCAL_VOC_ANNOTATION_OBJ_PK_PASCAL_VOC_ANNOTATION_OBJ_CMD_PASCAL_VOC_ANNOTATION_OBJ_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool PK_PASCAL_VOC_ANNOTATION_OBJ_CMD_PASCAL_VOC_ANNOTATION_OBJ_IsValid(int value);
constexpr PK_PASCAL_VOC_ANNOTATION_OBJ_CMD_PASCAL_VOC_ANNOTATION_OBJ PK_PASCAL_VOC_ANNOTATION_OBJ_CMD_PASCAL_VOC_ANNOTATION_OBJ_CMD_PASCAL_VOC_ANNOTATION_OBJ_MIN = PK_PASCAL_VOC_ANNOTATION_OBJ_CMD_PASCAL_VOC_ANNOTATION_OBJ_UNKNOWN;
constexpr PK_PASCAL_VOC_ANNOTATION_OBJ_CMD_PASCAL_VOC_ANNOTATION_OBJ PK_PASCAL_VOC_ANNOTATION_OBJ_CMD_PASCAL_VOC_ANNOTATION_OBJ_CMD_PASCAL_VOC_ANNOTATION_OBJ_MAX = PK_PASCAL_VOC_ANNOTATION_OBJ_CMD_PASCAL_VOC_ANNOTATION_OBJ_CMD;
constexpr int PK_PASCAL_VOC_ANNOTATION_OBJ_CMD_PASCAL_VOC_ANNOTATION_OBJ_CMD_PASCAL_VOC_ANNOTATION_OBJ_ARRAYSIZE = PK_PASCAL_VOC_ANNOTATION_OBJ_CMD_PASCAL_VOC_ANNOTATION_OBJ_CMD_PASCAL_VOC_ANNOTATION_OBJ_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* PK_PASCAL_VOC_ANNOTATION_OBJ_CMD_PASCAL_VOC_ANNOTATION_OBJ_descriptor();
template<typename T>
inline const std::string& PK_PASCAL_VOC_ANNOTATION_OBJ_CMD_PASCAL_VOC_ANNOTATION_OBJ_Name(T enum_t_value) {
  static_assert(::std::is_same<T, PK_PASCAL_VOC_ANNOTATION_OBJ_CMD_PASCAL_VOC_ANNOTATION_OBJ>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function PK_PASCAL_VOC_ANNOTATION_OBJ_CMD_PASCAL_VOC_ANNOTATION_OBJ_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    PK_PASCAL_VOC_ANNOTATION_OBJ_CMD_PASCAL_VOC_ANNOTATION_OBJ_descriptor(), enum_t_value);
}
inline bool PK_PASCAL_VOC_ANNOTATION_OBJ_CMD_PASCAL_VOC_ANNOTATION_OBJ_Parse(
    const std::string& name, PK_PASCAL_VOC_ANNOTATION_OBJ_CMD_PASCAL_VOC_ANNOTATION_OBJ* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<PK_PASCAL_VOC_ANNOTATION_OBJ_CMD_PASCAL_VOC_ANNOTATION_OBJ>(
    PK_PASCAL_VOC_ANNOTATION_OBJ_CMD_PASCAL_VOC_ANNOTATION_OBJ_descriptor(), name, value);
}
enum PK_PASCAL_VOC_ANNOTATION_CMD_PASCAL_VOC_ANNOTATION : int {
  PK_PASCAL_VOC_ANNOTATION_CMD_PASCAL_VOC_ANNOTATION_UNKNOWN = 0,
  PK_PASCAL_VOC_ANNOTATION_CMD_PASCAL_VOC_ANNOTATION_CMD = 168493057,
  PK_PASCAL_VOC_ANNOTATION_CMD_PASCAL_VOC_ANNOTATION_PK_PASCAL_VOC_ANNOTATION_CMD_PASCAL_VOC_ANNOTATION_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  PK_PASCAL_VOC_ANNOTATION_CMD_PASCAL_VOC_ANNOTATION_PK_PASCAL_VOC_ANNOTATION_CMD_PASCAL_VOC_ANNOTATION_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool PK_PASCAL_VOC_ANNOTATION_CMD_PASCAL_VOC_ANNOTATION_IsValid(int value);
constexpr PK_PASCAL_VOC_ANNOTATION_CMD_PASCAL_VOC_ANNOTATION PK_PASCAL_VOC_ANNOTATION_CMD_PASCAL_VOC_ANNOTATION_CMD_PASCAL_VOC_ANNOTATION_MIN = PK_PASCAL_VOC_ANNOTATION_CMD_PASCAL_VOC_ANNOTATION_UNKNOWN;
constexpr PK_PASCAL_VOC_ANNOTATION_CMD_PASCAL_VOC_ANNOTATION PK_PASCAL_VOC_ANNOTATION_CMD_PASCAL_VOC_ANNOTATION_CMD_PASCAL_VOC_ANNOTATION_MAX = PK_PASCAL_VOC_ANNOTATION_CMD_PASCAL_VOC_ANNOTATION_CMD;
constexpr int PK_PASCAL_VOC_ANNOTATION_CMD_PASCAL_VOC_ANNOTATION_CMD_PASCAL_VOC_ANNOTATION_ARRAYSIZE = PK_PASCAL_VOC_ANNOTATION_CMD_PASCAL_VOC_ANNOTATION_CMD_PASCAL_VOC_ANNOTATION_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* PK_PASCAL_VOC_ANNOTATION_CMD_PASCAL_VOC_ANNOTATION_descriptor();
template<typename T>
inline const std::string& PK_PASCAL_VOC_ANNOTATION_CMD_PASCAL_VOC_ANNOTATION_Name(T enum_t_value) {
  static_assert(::std::is_same<T, PK_PASCAL_VOC_ANNOTATION_CMD_PASCAL_VOC_ANNOTATION>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function PK_PASCAL_VOC_ANNOTATION_CMD_PASCAL_VOC_ANNOTATION_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    PK_PASCAL_VOC_ANNOTATION_CMD_PASCAL_VOC_ANNOTATION_descriptor(), enum_t_value);
}
inline bool PK_PASCAL_VOC_ANNOTATION_CMD_PASCAL_VOC_ANNOTATION_Parse(
    const std::string& name, PK_PASCAL_VOC_ANNOTATION_CMD_PASCAL_VOC_ANNOTATION* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<PK_PASCAL_VOC_ANNOTATION_CMD_PASCAL_VOC_ANNOTATION>(
    PK_PASCAL_VOC_ANNOTATION_CMD_PASCAL_VOC_ANNOTATION_descriptor(), name, value);
}
enum PK_PASCAL_VOC_SAVE_REQ_CMD_PASCAL_VOC_SAVE_REQ : int {
  PK_PASCAL_VOC_SAVE_REQ_CMD_PASCAL_VOC_SAVE_REQ_UNKNOWN = 0,
  PK_PASCAL_VOC_SAVE_REQ_CMD_PASCAL_VOC_SAVE_REQ_CMD = 168493057,
  PK_PASCAL_VOC_SAVE_REQ_CMD_PASCAL_VOC_SAVE_REQ_PK_PASCAL_VOC_SAVE_REQ_CMD_PASCAL_VOC_SAVE_REQ_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  PK_PASCAL_VOC_SAVE_REQ_CMD_PASCAL_VOC_SAVE_REQ_PK_PASCAL_VOC_SAVE_REQ_CMD_PASCAL_VOC_SAVE_REQ_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool PK_PASCAL_VOC_SAVE_REQ_CMD_PASCAL_VOC_SAVE_REQ_IsValid(int value);
constexpr PK_PASCAL_VOC_SAVE_REQ_CMD_PASCAL_VOC_SAVE_REQ PK_PASCAL_VOC_SAVE_REQ_CMD_PASCAL_VOC_SAVE_REQ_CMD_PASCAL_VOC_SAVE_REQ_MIN = PK_PASCAL_VOC_SAVE_REQ_CMD_PASCAL_VOC_SAVE_REQ_UNKNOWN;
constexpr PK_PASCAL_VOC_SAVE_REQ_CMD_PASCAL_VOC_SAVE_REQ PK_PASCAL_VOC_SAVE_REQ_CMD_PASCAL_VOC_SAVE_REQ_CMD_PASCAL_VOC_SAVE_REQ_MAX = PK_PASCAL_VOC_SAVE_REQ_CMD_PASCAL_VOC_SAVE_REQ_CMD;
constexpr int PK_PASCAL_VOC_SAVE_REQ_CMD_PASCAL_VOC_SAVE_REQ_CMD_PASCAL_VOC_SAVE_REQ_ARRAYSIZE = PK_PASCAL_VOC_SAVE_REQ_CMD_PASCAL_VOC_SAVE_REQ_CMD_PASCAL_VOC_SAVE_REQ_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* PK_PASCAL_VOC_SAVE_REQ_CMD_PASCAL_VOC_SAVE_REQ_descriptor();
template<typename T>
inline const std::string& PK_PASCAL_VOC_SAVE_REQ_CMD_PASCAL_VOC_SAVE_REQ_Name(T enum_t_value) {
  static_assert(::std::is_same<T, PK_PASCAL_VOC_SAVE_REQ_CMD_PASCAL_VOC_SAVE_REQ>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function PK_PASCAL_VOC_SAVE_REQ_CMD_PASCAL_VOC_SAVE_REQ_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    PK_PASCAL_VOC_SAVE_REQ_CMD_PASCAL_VOC_SAVE_REQ_descriptor(), enum_t_value);
}
inline bool PK_PASCAL_VOC_SAVE_REQ_CMD_PASCAL_VOC_SAVE_REQ_Parse(
    const std::string& name, PK_PASCAL_VOC_SAVE_REQ_CMD_PASCAL_VOC_SAVE_REQ* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<PK_PASCAL_VOC_SAVE_REQ_CMD_PASCAL_VOC_SAVE_REQ>(
    PK_PASCAL_VOC_SAVE_REQ_CMD_PASCAL_VOC_SAVE_REQ_descriptor(), name, value);
}
enum PK_PASCAL_VOC_SAVE_RSP_CMD_PASCAL_VOC_SAVE_RSP : int {
  PK_PASCAL_VOC_SAVE_RSP_CMD_PASCAL_VOC_SAVE_RSP_UNKNOWN = 0,
  PK_PASCAL_VOC_SAVE_RSP_CMD_PASCAL_VOC_SAVE_RSP_CMD = 185204737,
  PK_PASCAL_VOC_SAVE_RSP_CMD_PASCAL_VOC_SAVE_RSP_PK_PASCAL_VOC_SAVE_RSP_CMD_PASCAL_VOC_SAVE_RSP_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  PK_PASCAL_VOC_SAVE_RSP_CMD_PASCAL_VOC_SAVE_RSP_PK_PASCAL_VOC_SAVE_RSP_CMD_PASCAL_VOC_SAVE_RSP_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool PK_PASCAL_VOC_SAVE_RSP_CMD_PASCAL_VOC_SAVE_RSP_IsValid(int value);
constexpr PK_PASCAL_VOC_SAVE_RSP_CMD_PASCAL_VOC_SAVE_RSP PK_PASCAL_VOC_SAVE_RSP_CMD_PASCAL_VOC_SAVE_RSP_CMD_PASCAL_VOC_SAVE_RSP_MIN = PK_PASCAL_VOC_SAVE_RSP_CMD_PASCAL_VOC_SAVE_RSP_UNKNOWN;
constexpr PK_PASCAL_VOC_SAVE_RSP_CMD_PASCAL_VOC_SAVE_RSP PK_PASCAL_VOC_SAVE_RSP_CMD_PASCAL_VOC_SAVE_RSP_CMD_PASCAL_VOC_SAVE_RSP_MAX = PK_PASCAL_VOC_SAVE_RSP_CMD_PASCAL_VOC_SAVE_RSP_CMD;
constexpr int PK_PASCAL_VOC_SAVE_RSP_CMD_PASCAL_VOC_SAVE_RSP_CMD_PASCAL_VOC_SAVE_RSP_ARRAYSIZE = PK_PASCAL_VOC_SAVE_RSP_CMD_PASCAL_VOC_SAVE_RSP_CMD_PASCAL_VOC_SAVE_RSP_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* PK_PASCAL_VOC_SAVE_RSP_CMD_PASCAL_VOC_SAVE_RSP_descriptor();
template<typename T>
inline const std::string& PK_PASCAL_VOC_SAVE_RSP_CMD_PASCAL_VOC_SAVE_RSP_Name(T enum_t_value) {
  static_assert(::std::is_same<T, PK_PASCAL_VOC_SAVE_RSP_CMD_PASCAL_VOC_SAVE_RSP>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function PK_PASCAL_VOC_SAVE_RSP_CMD_PASCAL_VOC_SAVE_RSP_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    PK_PASCAL_VOC_SAVE_RSP_CMD_PASCAL_VOC_SAVE_RSP_descriptor(), enum_t_value);
}
inline bool PK_PASCAL_VOC_SAVE_RSP_CMD_PASCAL_VOC_SAVE_RSP_Parse(
    const std::string& name, PK_PASCAL_VOC_SAVE_RSP_CMD_PASCAL_VOC_SAVE_RSP* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<PK_PASCAL_VOC_SAVE_RSP_CMD_PASCAL_VOC_SAVE_RSP>(
    PK_PASCAL_VOC_SAVE_RSP_CMD_PASCAL_VOC_SAVE_RSP_descriptor(), name, value);
}
// ===================================================================

class PK_PASCAL_VOC_ANNOTATION_OBJ :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pb.PK_PASCAL_VOC_ANNOTATION_OBJ) */ {
 public:
  PK_PASCAL_VOC_ANNOTATION_OBJ();
  virtual ~PK_PASCAL_VOC_ANNOTATION_OBJ();

  PK_PASCAL_VOC_ANNOTATION_OBJ(const PK_PASCAL_VOC_ANNOTATION_OBJ& from);
  PK_PASCAL_VOC_ANNOTATION_OBJ(PK_PASCAL_VOC_ANNOTATION_OBJ&& from) noexcept
    : PK_PASCAL_VOC_ANNOTATION_OBJ() {
    *this = ::std::move(from);
  }

  inline PK_PASCAL_VOC_ANNOTATION_OBJ& operator=(const PK_PASCAL_VOC_ANNOTATION_OBJ& from) {
    CopyFrom(from);
    return *this;
  }
  inline PK_PASCAL_VOC_ANNOTATION_OBJ& operator=(PK_PASCAL_VOC_ANNOTATION_OBJ&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PK_PASCAL_VOC_ANNOTATION_OBJ& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PK_PASCAL_VOC_ANNOTATION_OBJ* internal_default_instance() {
    return reinterpret_cast<const PK_PASCAL_VOC_ANNOTATION_OBJ*>(
               &_PK_PASCAL_VOC_ANNOTATION_OBJ_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(PK_PASCAL_VOC_ANNOTATION_OBJ& a, PK_PASCAL_VOC_ANNOTATION_OBJ& b) {
    a.Swap(&b);
  }
  inline void Swap(PK_PASCAL_VOC_ANNOTATION_OBJ* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PK_PASCAL_VOC_ANNOTATION_OBJ* New() const final {
    return CreateMaybeMessage<PK_PASCAL_VOC_ANNOTATION_OBJ>(nullptr);
  }

  PK_PASCAL_VOC_ANNOTATION_OBJ* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PK_PASCAL_VOC_ANNOTATION_OBJ>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PK_PASCAL_VOC_ANNOTATION_OBJ& from);
  void MergeFrom(const PK_PASCAL_VOC_ANNOTATION_OBJ& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PK_PASCAL_VOC_ANNOTATION_OBJ* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pb.PK_PASCAL_VOC_ANNOTATION_OBJ";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_api_2eproto);
    return ::descriptor_table_api_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef PK_PASCAL_VOC_ANNOTATION_OBJ_CMD_PASCAL_VOC_ANNOTATION_OBJ CMD_PASCAL_VOC_ANNOTATION_OBJ;
  static constexpr CMD_PASCAL_VOC_ANNOTATION_OBJ UNKNOWN =
    PK_PASCAL_VOC_ANNOTATION_OBJ_CMD_PASCAL_VOC_ANNOTATION_OBJ_UNKNOWN;
  static constexpr CMD_PASCAL_VOC_ANNOTATION_OBJ CMD =
    PK_PASCAL_VOC_ANNOTATION_OBJ_CMD_PASCAL_VOC_ANNOTATION_OBJ_CMD;
  static inline bool CMD_PASCAL_VOC_ANNOTATION_OBJ_IsValid(int value) {
    return PK_PASCAL_VOC_ANNOTATION_OBJ_CMD_PASCAL_VOC_ANNOTATION_OBJ_IsValid(value);
  }
  static constexpr CMD_PASCAL_VOC_ANNOTATION_OBJ CMD_PASCAL_VOC_ANNOTATION_OBJ_MIN =
    PK_PASCAL_VOC_ANNOTATION_OBJ_CMD_PASCAL_VOC_ANNOTATION_OBJ_CMD_PASCAL_VOC_ANNOTATION_OBJ_MIN;
  static constexpr CMD_PASCAL_VOC_ANNOTATION_OBJ CMD_PASCAL_VOC_ANNOTATION_OBJ_MAX =
    PK_PASCAL_VOC_ANNOTATION_OBJ_CMD_PASCAL_VOC_ANNOTATION_OBJ_CMD_PASCAL_VOC_ANNOTATION_OBJ_MAX;
  static constexpr int CMD_PASCAL_VOC_ANNOTATION_OBJ_ARRAYSIZE =
    PK_PASCAL_VOC_ANNOTATION_OBJ_CMD_PASCAL_VOC_ANNOTATION_OBJ_CMD_PASCAL_VOC_ANNOTATION_OBJ_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  CMD_PASCAL_VOC_ANNOTATION_OBJ_descriptor() {
    return PK_PASCAL_VOC_ANNOTATION_OBJ_CMD_PASCAL_VOC_ANNOTATION_OBJ_descriptor();
  }
  template<typename T>
  static inline const std::string& CMD_PASCAL_VOC_ANNOTATION_OBJ_Name(T enum_t_value) {
    static_assert(::std::is_same<T, CMD_PASCAL_VOC_ANNOTATION_OBJ>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function CMD_PASCAL_VOC_ANNOTATION_OBJ_Name.");
    return PK_PASCAL_VOC_ANNOTATION_OBJ_CMD_PASCAL_VOC_ANNOTATION_OBJ_Name(enum_t_value);
  }
  static inline bool CMD_PASCAL_VOC_ANNOTATION_OBJ_Parse(const std::string& name,
      CMD_PASCAL_VOC_ANNOTATION_OBJ* value) {
    return PK_PASCAL_VOC_ANNOTATION_OBJ_CMD_PASCAL_VOC_ANNOTATION_OBJ_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kObjNameFieldNumber = 1,
    kObjPoseFieldNumber = 2,
    kObjTruncatedFieldNumber = 3,
    kObjDifficultFieldNumber = 4,
    kBndboxXminFieldNumber = 5,
    kBndboxYminFieldNumber = 6,
    kBndboxXmaxFieldNumber = 7,
    kBndboxYmaxFieldNumber = 8,
  };
  // string objName = 1;
  void clear_objname();
  const std::string& objname() const;
  void set_objname(const std::string& value);
  void set_objname(std::string&& value);
  void set_objname(const char* value);
  void set_objname(const char* value, size_t size);
  std::string* mutable_objname();
  std::string* release_objname();
  void set_allocated_objname(std::string* objname);
  private:
  const std::string& _internal_objname() const;
  void _internal_set_objname(const std::string& value);
  std::string* _internal_mutable_objname();
  public:

  // string objPose = 2;
  void clear_objpose();
  const std::string& objpose() const;
  void set_objpose(const std::string& value);
  void set_objpose(std::string&& value);
  void set_objpose(const char* value);
  void set_objpose(const char* value, size_t size);
  std::string* mutable_objpose();
  std::string* release_objpose();
  void set_allocated_objpose(std::string* objpose);
  private:
  const std::string& _internal_objpose() const;
  void _internal_set_objpose(const std::string& value);
  std::string* _internal_mutable_objpose();
  public:

  // int32 objTruncated = 3;
  void clear_objtruncated();
  ::PROTOBUF_NAMESPACE_ID::int32 objtruncated() const;
  void set_objtruncated(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_objtruncated() const;
  void _internal_set_objtruncated(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 objDifficult = 4;
  void clear_objdifficult();
  ::PROTOBUF_NAMESPACE_ID::int32 objdifficult() const;
  void set_objdifficult(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_objdifficult() const;
  void _internal_set_objdifficult(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 bndboxXmin = 5;
  void clear_bndboxxmin();
  ::PROTOBUF_NAMESPACE_ID::int32 bndboxxmin() const;
  void set_bndboxxmin(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_bndboxxmin() const;
  void _internal_set_bndboxxmin(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 bndboxYmin = 6;
  void clear_bndboxymin();
  ::PROTOBUF_NAMESPACE_ID::int32 bndboxymin() const;
  void set_bndboxymin(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_bndboxymin() const;
  void _internal_set_bndboxymin(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 bndboxXmax = 7;
  void clear_bndboxxmax();
  ::PROTOBUF_NAMESPACE_ID::int32 bndboxxmax() const;
  void set_bndboxxmax(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_bndboxxmax() const;
  void _internal_set_bndboxxmax(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 bndboxYmax = 8;
  void clear_bndboxymax();
  ::PROTOBUF_NAMESPACE_ID::int32 bndboxymax() const;
  void set_bndboxymax(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_bndboxymax() const;
  void _internal_set_bndboxymax(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:pb.PK_PASCAL_VOC_ANNOTATION_OBJ)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr objname_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr objpose_;
  ::PROTOBUF_NAMESPACE_ID::int32 objtruncated_;
  ::PROTOBUF_NAMESPACE_ID::int32 objdifficult_;
  ::PROTOBUF_NAMESPACE_ID::int32 bndboxxmin_;
  ::PROTOBUF_NAMESPACE_ID::int32 bndboxymin_;
  ::PROTOBUF_NAMESPACE_ID::int32 bndboxxmax_;
  ::PROTOBUF_NAMESPACE_ID::int32 bndboxymax_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_api_2eproto;
};
// -------------------------------------------------------------------

class PK_PASCAL_VOC_ANNOTATION :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pb.PK_PASCAL_VOC_ANNOTATION) */ {
 public:
  PK_PASCAL_VOC_ANNOTATION();
  virtual ~PK_PASCAL_VOC_ANNOTATION();

  PK_PASCAL_VOC_ANNOTATION(const PK_PASCAL_VOC_ANNOTATION& from);
  PK_PASCAL_VOC_ANNOTATION(PK_PASCAL_VOC_ANNOTATION&& from) noexcept
    : PK_PASCAL_VOC_ANNOTATION() {
    *this = ::std::move(from);
  }

  inline PK_PASCAL_VOC_ANNOTATION& operator=(const PK_PASCAL_VOC_ANNOTATION& from) {
    CopyFrom(from);
    return *this;
  }
  inline PK_PASCAL_VOC_ANNOTATION& operator=(PK_PASCAL_VOC_ANNOTATION&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PK_PASCAL_VOC_ANNOTATION& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PK_PASCAL_VOC_ANNOTATION* internal_default_instance() {
    return reinterpret_cast<const PK_PASCAL_VOC_ANNOTATION*>(
               &_PK_PASCAL_VOC_ANNOTATION_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(PK_PASCAL_VOC_ANNOTATION& a, PK_PASCAL_VOC_ANNOTATION& b) {
    a.Swap(&b);
  }
  inline void Swap(PK_PASCAL_VOC_ANNOTATION* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PK_PASCAL_VOC_ANNOTATION* New() const final {
    return CreateMaybeMessage<PK_PASCAL_VOC_ANNOTATION>(nullptr);
  }

  PK_PASCAL_VOC_ANNOTATION* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PK_PASCAL_VOC_ANNOTATION>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PK_PASCAL_VOC_ANNOTATION& from);
  void MergeFrom(const PK_PASCAL_VOC_ANNOTATION& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PK_PASCAL_VOC_ANNOTATION* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pb.PK_PASCAL_VOC_ANNOTATION";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_api_2eproto);
    return ::descriptor_table_api_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef PK_PASCAL_VOC_ANNOTATION_CMD_PASCAL_VOC_ANNOTATION CMD_PASCAL_VOC_ANNOTATION;
  static constexpr CMD_PASCAL_VOC_ANNOTATION UNKNOWN =
    PK_PASCAL_VOC_ANNOTATION_CMD_PASCAL_VOC_ANNOTATION_UNKNOWN;
  static constexpr CMD_PASCAL_VOC_ANNOTATION CMD =
    PK_PASCAL_VOC_ANNOTATION_CMD_PASCAL_VOC_ANNOTATION_CMD;
  static inline bool CMD_PASCAL_VOC_ANNOTATION_IsValid(int value) {
    return PK_PASCAL_VOC_ANNOTATION_CMD_PASCAL_VOC_ANNOTATION_IsValid(value);
  }
  static constexpr CMD_PASCAL_VOC_ANNOTATION CMD_PASCAL_VOC_ANNOTATION_MIN =
    PK_PASCAL_VOC_ANNOTATION_CMD_PASCAL_VOC_ANNOTATION_CMD_PASCAL_VOC_ANNOTATION_MIN;
  static constexpr CMD_PASCAL_VOC_ANNOTATION CMD_PASCAL_VOC_ANNOTATION_MAX =
    PK_PASCAL_VOC_ANNOTATION_CMD_PASCAL_VOC_ANNOTATION_CMD_PASCAL_VOC_ANNOTATION_MAX;
  static constexpr int CMD_PASCAL_VOC_ANNOTATION_ARRAYSIZE =
    PK_PASCAL_VOC_ANNOTATION_CMD_PASCAL_VOC_ANNOTATION_CMD_PASCAL_VOC_ANNOTATION_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  CMD_PASCAL_VOC_ANNOTATION_descriptor() {
    return PK_PASCAL_VOC_ANNOTATION_CMD_PASCAL_VOC_ANNOTATION_descriptor();
  }
  template<typename T>
  static inline const std::string& CMD_PASCAL_VOC_ANNOTATION_Name(T enum_t_value) {
    static_assert(::std::is_same<T, CMD_PASCAL_VOC_ANNOTATION>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function CMD_PASCAL_VOC_ANNOTATION_Name.");
    return PK_PASCAL_VOC_ANNOTATION_CMD_PASCAL_VOC_ANNOTATION_Name(enum_t_value);
  }
  static inline bool CMD_PASCAL_VOC_ANNOTATION_Parse(const std::string& name,
      CMD_PASCAL_VOC_ANNOTATION* value) {
    return PK_PASCAL_VOC_ANNOTATION_CMD_PASCAL_VOC_ANNOTATION_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kObjsFieldNumber = 9,
    kFolderFieldNumber = 1,
    kFilenameFieldNumber = 2,
    kPathFieldNumber = 3,
    kSourcedatabaseFieldNumber = 4,
    kSzWidthFieldNumber = 5,
    kSzHeightFieldNumber = 6,
    kSzDepthFieldNumber = 7,
    kSegmentedFieldNumber = 8,
  };
  // repeated .pb.PK_PASCAL_VOC_ANNOTATION_OBJ objs = 9;
  int objs_size() const;
  private:
  int _internal_objs_size() const;
  public:
  void clear_objs();
  ::pb::PK_PASCAL_VOC_ANNOTATION_OBJ* mutable_objs(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb::PK_PASCAL_VOC_ANNOTATION_OBJ >*
      mutable_objs();
  private:
  const ::pb::PK_PASCAL_VOC_ANNOTATION_OBJ& _internal_objs(int index) const;
  ::pb::PK_PASCAL_VOC_ANNOTATION_OBJ* _internal_add_objs();
  public:
  const ::pb::PK_PASCAL_VOC_ANNOTATION_OBJ& objs(int index) const;
  ::pb::PK_PASCAL_VOC_ANNOTATION_OBJ* add_objs();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb::PK_PASCAL_VOC_ANNOTATION_OBJ >&
      objs() const;

  // string folder = 1;
  void clear_folder();
  const std::string& folder() const;
  void set_folder(const std::string& value);
  void set_folder(std::string&& value);
  void set_folder(const char* value);
  void set_folder(const char* value, size_t size);
  std::string* mutable_folder();
  std::string* release_folder();
  void set_allocated_folder(std::string* folder);
  private:
  const std::string& _internal_folder() const;
  void _internal_set_folder(const std::string& value);
  std::string* _internal_mutable_folder();
  public:

  // string filename = 2;
  void clear_filename();
  const std::string& filename() const;
  void set_filename(const std::string& value);
  void set_filename(std::string&& value);
  void set_filename(const char* value);
  void set_filename(const char* value, size_t size);
  std::string* mutable_filename();
  std::string* release_filename();
  void set_allocated_filename(std::string* filename);
  private:
  const std::string& _internal_filename() const;
  void _internal_set_filename(const std::string& value);
  std::string* _internal_mutable_filename();
  public:

  // string path = 3;
  void clear_path();
  const std::string& path() const;
  void set_path(const std::string& value);
  void set_path(std::string&& value);
  void set_path(const char* value);
  void set_path(const char* value, size_t size);
  std::string* mutable_path();
  std::string* release_path();
  void set_allocated_path(std::string* path);
  private:
  const std::string& _internal_path() const;
  void _internal_set_path(const std::string& value);
  std::string* _internal_mutable_path();
  public:

  // string sourcedatabase = 4;
  void clear_sourcedatabase();
  const std::string& sourcedatabase() const;
  void set_sourcedatabase(const std::string& value);
  void set_sourcedatabase(std::string&& value);
  void set_sourcedatabase(const char* value);
  void set_sourcedatabase(const char* value, size_t size);
  std::string* mutable_sourcedatabase();
  std::string* release_sourcedatabase();
  void set_allocated_sourcedatabase(std::string* sourcedatabase);
  private:
  const std::string& _internal_sourcedatabase() const;
  void _internal_set_sourcedatabase(const std::string& value);
  std::string* _internal_mutable_sourcedatabase();
  public:

  // int32 szWidth = 5;
  void clear_szwidth();
  ::PROTOBUF_NAMESPACE_ID::int32 szwidth() const;
  void set_szwidth(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_szwidth() const;
  void _internal_set_szwidth(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 szHeight = 6;
  void clear_szheight();
  ::PROTOBUF_NAMESPACE_ID::int32 szheight() const;
  void set_szheight(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_szheight() const;
  void _internal_set_szheight(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 szDepth = 7;
  void clear_szdepth();
  ::PROTOBUF_NAMESPACE_ID::int32 szdepth() const;
  void set_szdepth(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_szdepth() const;
  void _internal_set_szdepth(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 segmented = 8;
  void clear_segmented();
  ::PROTOBUF_NAMESPACE_ID::int32 segmented() const;
  void set_segmented(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_segmented() const;
  void _internal_set_segmented(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:pb.PK_PASCAL_VOC_ANNOTATION)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb::PK_PASCAL_VOC_ANNOTATION_OBJ > objs_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr folder_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr filename_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr path_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr sourcedatabase_;
  ::PROTOBUF_NAMESPACE_ID::int32 szwidth_;
  ::PROTOBUF_NAMESPACE_ID::int32 szheight_;
  ::PROTOBUF_NAMESPACE_ID::int32 szdepth_;
  ::PROTOBUF_NAMESPACE_ID::int32 segmented_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_api_2eproto;
};
// -------------------------------------------------------------------

class PK_PASCAL_VOC_SAVE_REQ :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pb.PK_PASCAL_VOC_SAVE_REQ) */ {
 public:
  PK_PASCAL_VOC_SAVE_REQ();
  virtual ~PK_PASCAL_VOC_SAVE_REQ();

  PK_PASCAL_VOC_SAVE_REQ(const PK_PASCAL_VOC_SAVE_REQ& from);
  PK_PASCAL_VOC_SAVE_REQ(PK_PASCAL_VOC_SAVE_REQ&& from) noexcept
    : PK_PASCAL_VOC_SAVE_REQ() {
    *this = ::std::move(from);
  }

  inline PK_PASCAL_VOC_SAVE_REQ& operator=(const PK_PASCAL_VOC_SAVE_REQ& from) {
    CopyFrom(from);
    return *this;
  }
  inline PK_PASCAL_VOC_SAVE_REQ& operator=(PK_PASCAL_VOC_SAVE_REQ&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PK_PASCAL_VOC_SAVE_REQ& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PK_PASCAL_VOC_SAVE_REQ* internal_default_instance() {
    return reinterpret_cast<const PK_PASCAL_VOC_SAVE_REQ*>(
               &_PK_PASCAL_VOC_SAVE_REQ_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(PK_PASCAL_VOC_SAVE_REQ& a, PK_PASCAL_VOC_SAVE_REQ& b) {
    a.Swap(&b);
  }
  inline void Swap(PK_PASCAL_VOC_SAVE_REQ* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PK_PASCAL_VOC_SAVE_REQ* New() const final {
    return CreateMaybeMessage<PK_PASCAL_VOC_SAVE_REQ>(nullptr);
  }

  PK_PASCAL_VOC_SAVE_REQ* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PK_PASCAL_VOC_SAVE_REQ>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PK_PASCAL_VOC_SAVE_REQ& from);
  void MergeFrom(const PK_PASCAL_VOC_SAVE_REQ& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PK_PASCAL_VOC_SAVE_REQ* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pb.PK_PASCAL_VOC_SAVE_REQ";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_api_2eproto);
    return ::descriptor_table_api_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef PK_PASCAL_VOC_SAVE_REQ_CMD_PASCAL_VOC_SAVE_REQ CMD_PASCAL_VOC_SAVE_REQ;
  static constexpr CMD_PASCAL_VOC_SAVE_REQ UNKNOWN =
    PK_PASCAL_VOC_SAVE_REQ_CMD_PASCAL_VOC_SAVE_REQ_UNKNOWN;
  static constexpr CMD_PASCAL_VOC_SAVE_REQ CMD =
    PK_PASCAL_VOC_SAVE_REQ_CMD_PASCAL_VOC_SAVE_REQ_CMD;
  static inline bool CMD_PASCAL_VOC_SAVE_REQ_IsValid(int value) {
    return PK_PASCAL_VOC_SAVE_REQ_CMD_PASCAL_VOC_SAVE_REQ_IsValid(value);
  }
  static constexpr CMD_PASCAL_VOC_SAVE_REQ CMD_PASCAL_VOC_SAVE_REQ_MIN =
    PK_PASCAL_VOC_SAVE_REQ_CMD_PASCAL_VOC_SAVE_REQ_CMD_PASCAL_VOC_SAVE_REQ_MIN;
  static constexpr CMD_PASCAL_VOC_SAVE_REQ CMD_PASCAL_VOC_SAVE_REQ_MAX =
    PK_PASCAL_VOC_SAVE_REQ_CMD_PASCAL_VOC_SAVE_REQ_CMD_PASCAL_VOC_SAVE_REQ_MAX;
  static constexpr int CMD_PASCAL_VOC_SAVE_REQ_ARRAYSIZE =
    PK_PASCAL_VOC_SAVE_REQ_CMD_PASCAL_VOC_SAVE_REQ_CMD_PASCAL_VOC_SAVE_REQ_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  CMD_PASCAL_VOC_SAVE_REQ_descriptor() {
    return PK_PASCAL_VOC_SAVE_REQ_CMD_PASCAL_VOC_SAVE_REQ_descriptor();
  }
  template<typename T>
  static inline const std::string& CMD_PASCAL_VOC_SAVE_REQ_Name(T enum_t_value) {
    static_assert(::std::is_same<T, CMD_PASCAL_VOC_SAVE_REQ>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function CMD_PASCAL_VOC_SAVE_REQ_Name.");
    return PK_PASCAL_VOC_SAVE_REQ_CMD_PASCAL_VOC_SAVE_REQ_Name(enum_t_value);
  }
  static inline bool CMD_PASCAL_VOC_SAVE_REQ_Parse(const std::string& name,
      CMD_PASCAL_VOC_SAVE_REQ* value) {
    return PK_PASCAL_VOC_SAVE_REQ_CMD_PASCAL_VOC_SAVE_REQ_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kFilenameFieldNumber = 1,
    kAnnotationFieldNumber = 2,
  };
  // string filename = 1;
  void clear_filename();
  const std::string& filename() const;
  void set_filename(const std::string& value);
  void set_filename(std::string&& value);
  void set_filename(const char* value);
  void set_filename(const char* value, size_t size);
  std::string* mutable_filename();
  std::string* release_filename();
  void set_allocated_filename(std::string* filename);
  private:
  const std::string& _internal_filename() const;
  void _internal_set_filename(const std::string& value);
  std::string* _internal_mutable_filename();
  public:

  // .pb.PK_PASCAL_VOC_ANNOTATION annotation = 2;
  bool has_annotation() const;
  private:
  bool _internal_has_annotation() const;
  public:
  void clear_annotation();
  const ::pb::PK_PASCAL_VOC_ANNOTATION& annotation() const;
  ::pb::PK_PASCAL_VOC_ANNOTATION* release_annotation();
  ::pb::PK_PASCAL_VOC_ANNOTATION* mutable_annotation();
  void set_allocated_annotation(::pb::PK_PASCAL_VOC_ANNOTATION* annotation);
  private:
  const ::pb::PK_PASCAL_VOC_ANNOTATION& _internal_annotation() const;
  ::pb::PK_PASCAL_VOC_ANNOTATION* _internal_mutable_annotation();
  public:

  // @@protoc_insertion_point(class_scope:pb.PK_PASCAL_VOC_SAVE_REQ)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr filename_;
  ::pb::PK_PASCAL_VOC_ANNOTATION* annotation_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_api_2eproto;
};
// -------------------------------------------------------------------

class PK_PASCAL_VOC_SAVE_RSP :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pb.PK_PASCAL_VOC_SAVE_RSP) */ {
 public:
  PK_PASCAL_VOC_SAVE_RSP();
  virtual ~PK_PASCAL_VOC_SAVE_RSP();

  PK_PASCAL_VOC_SAVE_RSP(const PK_PASCAL_VOC_SAVE_RSP& from);
  PK_PASCAL_VOC_SAVE_RSP(PK_PASCAL_VOC_SAVE_RSP&& from) noexcept
    : PK_PASCAL_VOC_SAVE_RSP() {
    *this = ::std::move(from);
  }

  inline PK_PASCAL_VOC_SAVE_RSP& operator=(const PK_PASCAL_VOC_SAVE_RSP& from) {
    CopyFrom(from);
    return *this;
  }
  inline PK_PASCAL_VOC_SAVE_RSP& operator=(PK_PASCAL_VOC_SAVE_RSP&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PK_PASCAL_VOC_SAVE_RSP& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PK_PASCAL_VOC_SAVE_RSP* internal_default_instance() {
    return reinterpret_cast<const PK_PASCAL_VOC_SAVE_RSP*>(
               &_PK_PASCAL_VOC_SAVE_RSP_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(PK_PASCAL_VOC_SAVE_RSP& a, PK_PASCAL_VOC_SAVE_RSP& b) {
    a.Swap(&b);
  }
  inline void Swap(PK_PASCAL_VOC_SAVE_RSP* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PK_PASCAL_VOC_SAVE_RSP* New() const final {
    return CreateMaybeMessage<PK_PASCAL_VOC_SAVE_RSP>(nullptr);
  }

  PK_PASCAL_VOC_SAVE_RSP* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PK_PASCAL_VOC_SAVE_RSP>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PK_PASCAL_VOC_SAVE_RSP& from);
  void MergeFrom(const PK_PASCAL_VOC_SAVE_RSP& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PK_PASCAL_VOC_SAVE_RSP* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pb.PK_PASCAL_VOC_SAVE_RSP";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_api_2eproto);
    return ::descriptor_table_api_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef PK_PASCAL_VOC_SAVE_RSP_CMD_PASCAL_VOC_SAVE_RSP CMD_PASCAL_VOC_SAVE_RSP;
  static constexpr CMD_PASCAL_VOC_SAVE_RSP UNKNOWN =
    PK_PASCAL_VOC_SAVE_RSP_CMD_PASCAL_VOC_SAVE_RSP_UNKNOWN;
  static constexpr CMD_PASCAL_VOC_SAVE_RSP CMD =
    PK_PASCAL_VOC_SAVE_RSP_CMD_PASCAL_VOC_SAVE_RSP_CMD;
  static inline bool CMD_PASCAL_VOC_SAVE_RSP_IsValid(int value) {
    return PK_PASCAL_VOC_SAVE_RSP_CMD_PASCAL_VOC_SAVE_RSP_IsValid(value);
  }
  static constexpr CMD_PASCAL_VOC_SAVE_RSP CMD_PASCAL_VOC_SAVE_RSP_MIN =
    PK_PASCAL_VOC_SAVE_RSP_CMD_PASCAL_VOC_SAVE_RSP_CMD_PASCAL_VOC_SAVE_RSP_MIN;
  static constexpr CMD_PASCAL_VOC_SAVE_RSP CMD_PASCAL_VOC_SAVE_RSP_MAX =
    PK_PASCAL_VOC_SAVE_RSP_CMD_PASCAL_VOC_SAVE_RSP_CMD_PASCAL_VOC_SAVE_RSP_MAX;
  static constexpr int CMD_PASCAL_VOC_SAVE_RSP_ARRAYSIZE =
    PK_PASCAL_VOC_SAVE_RSP_CMD_PASCAL_VOC_SAVE_RSP_CMD_PASCAL_VOC_SAVE_RSP_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  CMD_PASCAL_VOC_SAVE_RSP_descriptor() {
    return PK_PASCAL_VOC_SAVE_RSP_CMD_PASCAL_VOC_SAVE_RSP_descriptor();
  }
  template<typename T>
  static inline const std::string& CMD_PASCAL_VOC_SAVE_RSP_Name(T enum_t_value) {
    static_assert(::std::is_same<T, CMD_PASCAL_VOC_SAVE_RSP>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function CMD_PASCAL_VOC_SAVE_RSP_Name.");
    return PK_PASCAL_VOC_SAVE_RSP_CMD_PASCAL_VOC_SAVE_RSP_Name(enum_t_value);
  }
  static inline bool CMD_PASCAL_VOC_SAVE_RSP_Parse(const std::string& name,
      CMD_PASCAL_VOC_SAVE_RSP* value) {
    return PK_PASCAL_VOC_SAVE_RSP_CMD_PASCAL_VOC_SAVE_RSP_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kErrmsgFieldNumber = 1,
  };
  // string errmsg = 1;
  void clear_errmsg();
  const std::string& errmsg() const;
  void set_errmsg(const std::string& value);
  void set_errmsg(std::string&& value);
  void set_errmsg(const char* value);
  void set_errmsg(const char* value, size_t size);
  std::string* mutable_errmsg();
  std::string* release_errmsg();
  void set_allocated_errmsg(std::string* errmsg);
  private:
  const std::string& _internal_errmsg() const;
  void _internal_set_errmsg(const std::string& value);
  std::string* _internal_mutable_errmsg();
  public:

  // @@protoc_insertion_point(class_scope:pb.PK_PASCAL_VOC_SAVE_RSP)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr errmsg_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_api_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// PK_PASCAL_VOC_ANNOTATION_OBJ

// string objName = 1;
inline void PK_PASCAL_VOC_ANNOTATION_OBJ::clear_objname() {
  objname_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& PK_PASCAL_VOC_ANNOTATION_OBJ::objname() const {
  // @@protoc_insertion_point(field_get:pb.PK_PASCAL_VOC_ANNOTATION_OBJ.objName)
  return _internal_objname();
}
inline void PK_PASCAL_VOC_ANNOTATION_OBJ::set_objname(const std::string& value) {
  _internal_set_objname(value);
  // @@protoc_insertion_point(field_set:pb.PK_PASCAL_VOC_ANNOTATION_OBJ.objName)
}
inline std::string* PK_PASCAL_VOC_ANNOTATION_OBJ::mutable_objname() {
  // @@protoc_insertion_point(field_mutable:pb.PK_PASCAL_VOC_ANNOTATION_OBJ.objName)
  return _internal_mutable_objname();
}
inline const std::string& PK_PASCAL_VOC_ANNOTATION_OBJ::_internal_objname() const {
  return objname_.GetNoArena();
}
inline void PK_PASCAL_VOC_ANNOTATION_OBJ::_internal_set_objname(const std::string& value) {
  
  objname_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void PK_PASCAL_VOC_ANNOTATION_OBJ::set_objname(std::string&& value) {
  
  objname_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.PK_PASCAL_VOC_ANNOTATION_OBJ.objName)
}
inline void PK_PASCAL_VOC_ANNOTATION_OBJ::set_objname(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  objname_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.PK_PASCAL_VOC_ANNOTATION_OBJ.objName)
}
inline void PK_PASCAL_VOC_ANNOTATION_OBJ::set_objname(const char* value, size_t size) {
  
  objname_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.PK_PASCAL_VOC_ANNOTATION_OBJ.objName)
}
inline std::string* PK_PASCAL_VOC_ANNOTATION_OBJ::_internal_mutable_objname() {
  
  return objname_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* PK_PASCAL_VOC_ANNOTATION_OBJ::release_objname() {
  // @@protoc_insertion_point(field_release:pb.PK_PASCAL_VOC_ANNOTATION_OBJ.objName)
  
  return objname_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void PK_PASCAL_VOC_ANNOTATION_OBJ::set_allocated_objname(std::string* objname) {
  if (objname != nullptr) {
    
  } else {
    
  }
  objname_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), objname);
  // @@protoc_insertion_point(field_set_allocated:pb.PK_PASCAL_VOC_ANNOTATION_OBJ.objName)
}

// string objPose = 2;
inline void PK_PASCAL_VOC_ANNOTATION_OBJ::clear_objpose() {
  objpose_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& PK_PASCAL_VOC_ANNOTATION_OBJ::objpose() const {
  // @@protoc_insertion_point(field_get:pb.PK_PASCAL_VOC_ANNOTATION_OBJ.objPose)
  return _internal_objpose();
}
inline void PK_PASCAL_VOC_ANNOTATION_OBJ::set_objpose(const std::string& value) {
  _internal_set_objpose(value);
  // @@protoc_insertion_point(field_set:pb.PK_PASCAL_VOC_ANNOTATION_OBJ.objPose)
}
inline std::string* PK_PASCAL_VOC_ANNOTATION_OBJ::mutable_objpose() {
  // @@protoc_insertion_point(field_mutable:pb.PK_PASCAL_VOC_ANNOTATION_OBJ.objPose)
  return _internal_mutable_objpose();
}
inline const std::string& PK_PASCAL_VOC_ANNOTATION_OBJ::_internal_objpose() const {
  return objpose_.GetNoArena();
}
inline void PK_PASCAL_VOC_ANNOTATION_OBJ::_internal_set_objpose(const std::string& value) {
  
  objpose_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void PK_PASCAL_VOC_ANNOTATION_OBJ::set_objpose(std::string&& value) {
  
  objpose_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.PK_PASCAL_VOC_ANNOTATION_OBJ.objPose)
}
inline void PK_PASCAL_VOC_ANNOTATION_OBJ::set_objpose(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  objpose_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.PK_PASCAL_VOC_ANNOTATION_OBJ.objPose)
}
inline void PK_PASCAL_VOC_ANNOTATION_OBJ::set_objpose(const char* value, size_t size) {
  
  objpose_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.PK_PASCAL_VOC_ANNOTATION_OBJ.objPose)
}
inline std::string* PK_PASCAL_VOC_ANNOTATION_OBJ::_internal_mutable_objpose() {
  
  return objpose_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* PK_PASCAL_VOC_ANNOTATION_OBJ::release_objpose() {
  // @@protoc_insertion_point(field_release:pb.PK_PASCAL_VOC_ANNOTATION_OBJ.objPose)
  
  return objpose_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void PK_PASCAL_VOC_ANNOTATION_OBJ::set_allocated_objpose(std::string* objpose) {
  if (objpose != nullptr) {
    
  } else {
    
  }
  objpose_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), objpose);
  // @@protoc_insertion_point(field_set_allocated:pb.PK_PASCAL_VOC_ANNOTATION_OBJ.objPose)
}

// int32 objTruncated = 3;
inline void PK_PASCAL_VOC_ANNOTATION_OBJ::clear_objtruncated() {
  objtruncated_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PK_PASCAL_VOC_ANNOTATION_OBJ::_internal_objtruncated() const {
  return objtruncated_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PK_PASCAL_VOC_ANNOTATION_OBJ::objtruncated() const {
  // @@protoc_insertion_point(field_get:pb.PK_PASCAL_VOC_ANNOTATION_OBJ.objTruncated)
  return _internal_objtruncated();
}
inline void PK_PASCAL_VOC_ANNOTATION_OBJ::_internal_set_objtruncated(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  objtruncated_ = value;
}
inline void PK_PASCAL_VOC_ANNOTATION_OBJ::set_objtruncated(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_objtruncated(value);
  // @@protoc_insertion_point(field_set:pb.PK_PASCAL_VOC_ANNOTATION_OBJ.objTruncated)
}

// int32 objDifficult = 4;
inline void PK_PASCAL_VOC_ANNOTATION_OBJ::clear_objdifficult() {
  objdifficult_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PK_PASCAL_VOC_ANNOTATION_OBJ::_internal_objdifficult() const {
  return objdifficult_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PK_PASCAL_VOC_ANNOTATION_OBJ::objdifficult() const {
  // @@protoc_insertion_point(field_get:pb.PK_PASCAL_VOC_ANNOTATION_OBJ.objDifficult)
  return _internal_objdifficult();
}
inline void PK_PASCAL_VOC_ANNOTATION_OBJ::_internal_set_objdifficult(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  objdifficult_ = value;
}
inline void PK_PASCAL_VOC_ANNOTATION_OBJ::set_objdifficult(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_objdifficult(value);
  // @@protoc_insertion_point(field_set:pb.PK_PASCAL_VOC_ANNOTATION_OBJ.objDifficult)
}

// int32 bndboxXmin = 5;
inline void PK_PASCAL_VOC_ANNOTATION_OBJ::clear_bndboxxmin() {
  bndboxxmin_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PK_PASCAL_VOC_ANNOTATION_OBJ::_internal_bndboxxmin() const {
  return bndboxxmin_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PK_PASCAL_VOC_ANNOTATION_OBJ::bndboxxmin() const {
  // @@protoc_insertion_point(field_get:pb.PK_PASCAL_VOC_ANNOTATION_OBJ.bndboxXmin)
  return _internal_bndboxxmin();
}
inline void PK_PASCAL_VOC_ANNOTATION_OBJ::_internal_set_bndboxxmin(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  bndboxxmin_ = value;
}
inline void PK_PASCAL_VOC_ANNOTATION_OBJ::set_bndboxxmin(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_bndboxxmin(value);
  // @@protoc_insertion_point(field_set:pb.PK_PASCAL_VOC_ANNOTATION_OBJ.bndboxXmin)
}

// int32 bndboxYmin = 6;
inline void PK_PASCAL_VOC_ANNOTATION_OBJ::clear_bndboxymin() {
  bndboxymin_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PK_PASCAL_VOC_ANNOTATION_OBJ::_internal_bndboxymin() const {
  return bndboxymin_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PK_PASCAL_VOC_ANNOTATION_OBJ::bndboxymin() const {
  // @@protoc_insertion_point(field_get:pb.PK_PASCAL_VOC_ANNOTATION_OBJ.bndboxYmin)
  return _internal_bndboxymin();
}
inline void PK_PASCAL_VOC_ANNOTATION_OBJ::_internal_set_bndboxymin(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  bndboxymin_ = value;
}
inline void PK_PASCAL_VOC_ANNOTATION_OBJ::set_bndboxymin(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_bndboxymin(value);
  // @@protoc_insertion_point(field_set:pb.PK_PASCAL_VOC_ANNOTATION_OBJ.bndboxYmin)
}

// int32 bndboxXmax = 7;
inline void PK_PASCAL_VOC_ANNOTATION_OBJ::clear_bndboxxmax() {
  bndboxxmax_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PK_PASCAL_VOC_ANNOTATION_OBJ::_internal_bndboxxmax() const {
  return bndboxxmax_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PK_PASCAL_VOC_ANNOTATION_OBJ::bndboxxmax() const {
  // @@protoc_insertion_point(field_get:pb.PK_PASCAL_VOC_ANNOTATION_OBJ.bndboxXmax)
  return _internal_bndboxxmax();
}
inline void PK_PASCAL_VOC_ANNOTATION_OBJ::_internal_set_bndboxxmax(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  bndboxxmax_ = value;
}
inline void PK_PASCAL_VOC_ANNOTATION_OBJ::set_bndboxxmax(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_bndboxxmax(value);
  // @@protoc_insertion_point(field_set:pb.PK_PASCAL_VOC_ANNOTATION_OBJ.bndboxXmax)
}

// int32 bndboxYmax = 8;
inline void PK_PASCAL_VOC_ANNOTATION_OBJ::clear_bndboxymax() {
  bndboxymax_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PK_PASCAL_VOC_ANNOTATION_OBJ::_internal_bndboxymax() const {
  return bndboxymax_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PK_PASCAL_VOC_ANNOTATION_OBJ::bndboxymax() const {
  // @@protoc_insertion_point(field_get:pb.PK_PASCAL_VOC_ANNOTATION_OBJ.bndboxYmax)
  return _internal_bndboxymax();
}
inline void PK_PASCAL_VOC_ANNOTATION_OBJ::_internal_set_bndboxymax(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  bndboxymax_ = value;
}
inline void PK_PASCAL_VOC_ANNOTATION_OBJ::set_bndboxymax(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_bndboxymax(value);
  // @@protoc_insertion_point(field_set:pb.PK_PASCAL_VOC_ANNOTATION_OBJ.bndboxYmax)
}

// -------------------------------------------------------------------

// PK_PASCAL_VOC_ANNOTATION

// string folder = 1;
inline void PK_PASCAL_VOC_ANNOTATION::clear_folder() {
  folder_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& PK_PASCAL_VOC_ANNOTATION::folder() const {
  // @@protoc_insertion_point(field_get:pb.PK_PASCAL_VOC_ANNOTATION.folder)
  return _internal_folder();
}
inline void PK_PASCAL_VOC_ANNOTATION::set_folder(const std::string& value) {
  _internal_set_folder(value);
  // @@protoc_insertion_point(field_set:pb.PK_PASCAL_VOC_ANNOTATION.folder)
}
inline std::string* PK_PASCAL_VOC_ANNOTATION::mutable_folder() {
  // @@protoc_insertion_point(field_mutable:pb.PK_PASCAL_VOC_ANNOTATION.folder)
  return _internal_mutable_folder();
}
inline const std::string& PK_PASCAL_VOC_ANNOTATION::_internal_folder() const {
  return folder_.GetNoArena();
}
inline void PK_PASCAL_VOC_ANNOTATION::_internal_set_folder(const std::string& value) {
  
  folder_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void PK_PASCAL_VOC_ANNOTATION::set_folder(std::string&& value) {
  
  folder_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.PK_PASCAL_VOC_ANNOTATION.folder)
}
inline void PK_PASCAL_VOC_ANNOTATION::set_folder(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  folder_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.PK_PASCAL_VOC_ANNOTATION.folder)
}
inline void PK_PASCAL_VOC_ANNOTATION::set_folder(const char* value, size_t size) {
  
  folder_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.PK_PASCAL_VOC_ANNOTATION.folder)
}
inline std::string* PK_PASCAL_VOC_ANNOTATION::_internal_mutable_folder() {
  
  return folder_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* PK_PASCAL_VOC_ANNOTATION::release_folder() {
  // @@protoc_insertion_point(field_release:pb.PK_PASCAL_VOC_ANNOTATION.folder)
  
  return folder_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void PK_PASCAL_VOC_ANNOTATION::set_allocated_folder(std::string* folder) {
  if (folder != nullptr) {
    
  } else {
    
  }
  folder_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), folder);
  // @@protoc_insertion_point(field_set_allocated:pb.PK_PASCAL_VOC_ANNOTATION.folder)
}

// string filename = 2;
inline void PK_PASCAL_VOC_ANNOTATION::clear_filename() {
  filename_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& PK_PASCAL_VOC_ANNOTATION::filename() const {
  // @@protoc_insertion_point(field_get:pb.PK_PASCAL_VOC_ANNOTATION.filename)
  return _internal_filename();
}
inline void PK_PASCAL_VOC_ANNOTATION::set_filename(const std::string& value) {
  _internal_set_filename(value);
  // @@protoc_insertion_point(field_set:pb.PK_PASCAL_VOC_ANNOTATION.filename)
}
inline std::string* PK_PASCAL_VOC_ANNOTATION::mutable_filename() {
  // @@protoc_insertion_point(field_mutable:pb.PK_PASCAL_VOC_ANNOTATION.filename)
  return _internal_mutable_filename();
}
inline const std::string& PK_PASCAL_VOC_ANNOTATION::_internal_filename() const {
  return filename_.GetNoArena();
}
inline void PK_PASCAL_VOC_ANNOTATION::_internal_set_filename(const std::string& value) {
  
  filename_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void PK_PASCAL_VOC_ANNOTATION::set_filename(std::string&& value) {
  
  filename_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.PK_PASCAL_VOC_ANNOTATION.filename)
}
inline void PK_PASCAL_VOC_ANNOTATION::set_filename(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  filename_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.PK_PASCAL_VOC_ANNOTATION.filename)
}
inline void PK_PASCAL_VOC_ANNOTATION::set_filename(const char* value, size_t size) {
  
  filename_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.PK_PASCAL_VOC_ANNOTATION.filename)
}
inline std::string* PK_PASCAL_VOC_ANNOTATION::_internal_mutable_filename() {
  
  return filename_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* PK_PASCAL_VOC_ANNOTATION::release_filename() {
  // @@protoc_insertion_point(field_release:pb.PK_PASCAL_VOC_ANNOTATION.filename)
  
  return filename_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void PK_PASCAL_VOC_ANNOTATION::set_allocated_filename(std::string* filename) {
  if (filename != nullptr) {
    
  } else {
    
  }
  filename_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), filename);
  // @@protoc_insertion_point(field_set_allocated:pb.PK_PASCAL_VOC_ANNOTATION.filename)
}

// string path = 3;
inline void PK_PASCAL_VOC_ANNOTATION::clear_path() {
  path_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& PK_PASCAL_VOC_ANNOTATION::path() const {
  // @@protoc_insertion_point(field_get:pb.PK_PASCAL_VOC_ANNOTATION.path)
  return _internal_path();
}
inline void PK_PASCAL_VOC_ANNOTATION::set_path(const std::string& value) {
  _internal_set_path(value);
  // @@protoc_insertion_point(field_set:pb.PK_PASCAL_VOC_ANNOTATION.path)
}
inline std::string* PK_PASCAL_VOC_ANNOTATION::mutable_path() {
  // @@protoc_insertion_point(field_mutable:pb.PK_PASCAL_VOC_ANNOTATION.path)
  return _internal_mutable_path();
}
inline const std::string& PK_PASCAL_VOC_ANNOTATION::_internal_path() const {
  return path_.GetNoArena();
}
inline void PK_PASCAL_VOC_ANNOTATION::_internal_set_path(const std::string& value) {
  
  path_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void PK_PASCAL_VOC_ANNOTATION::set_path(std::string&& value) {
  
  path_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.PK_PASCAL_VOC_ANNOTATION.path)
}
inline void PK_PASCAL_VOC_ANNOTATION::set_path(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  path_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.PK_PASCAL_VOC_ANNOTATION.path)
}
inline void PK_PASCAL_VOC_ANNOTATION::set_path(const char* value, size_t size) {
  
  path_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.PK_PASCAL_VOC_ANNOTATION.path)
}
inline std::string* PK_PASCAL_VOC_ANNOTATION::_internal_mutable_path() {
  
  return path_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* PK_PASCAL_VOC_ANNOTATION::release_path() {
  // @@protoc_insertion_point(field_release:pb.PK_PASCAL_VOC_ANNOTATION.path)
  
  return path_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void PK_PASCAL_VOC_ANNOTATION::set_allocated_path(std::string* path) {
  if (path != nullptr) {
    
  } else {
    
  }
  path_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), path);
  // @@protoc_insertion_point(field_set_allocated:pb.PK_PASCAL_VOC_ANNOTATION.path)
}

// string sourcedatabase = 4;
inline void PK_PASCAL_VOC_ANNOTATION::clear_sourcedatabase() {
  sourcedatabase_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& PK_PASCAL_VOC_ANNOTATION::sourcedatabase() const {
  // @@protoc_insertion_point(field_get:pb.PK_PASCAL_VOC_ANNOTATION.sourcedatabase)
  return _internal_sourcedatabase();
}
inline void PK_PASCAL_VOC_ANNOTATION::set_sourcedatabase(const std::string& value) {
  _internal_set_sourcedatabase(value);
  // @@protoc_insertion_point(field_set:pb.PK_PASCAL_VOC_ANNOTATION.sourcedatabase)
}
inline std::string* PK_PASCAL_VOC_ANNOTATION::mutable_sourcedatabase() {
  // @@protoc_insertion_point(field_mutable:pb.PK_PASCAL_VOC_ANNOTATION.sourcedatabase)
  return _internal_mutable_sourcedatabase();
}
inline const std::string& PK_PASCAL_VOC_ANNOTATION::_internal_sourcedatabase() const {
  return sourcedatabase_.GetNoArena();
}
inline void PK_PASCAL_VOC_ANNOTATION::_internal_set_sourcedatabase(const std::string& value) {
  
  sourcedatabase_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void PK_PASCAL_VOC_ANNOTATION::set_sourcedatabase(std::string&& value) {
  
  sourcedatabase_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.PK_PASCAL_VOC_ANNOTATION.sourcedatabase)
}
inline void PK_PASCAL_VOC_ANNOTATION::set_sourcedatabase(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  sourcedatabase_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.PK_PASCAL_VOC_ANNOTATION.sourcedatabase)
}
inline void PK_PASCAL_VOC_ANNOTATION::set_sourcedatabase(const char* value, size_t size) {
  
  sourcedatabase_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.PK_PASCAL_VOC_ANNOTATION.sourcedatabase)
}
inline std::string* PK_PASCAL_VOC_ANNOTATION::_internal_mutable_sourcedatabase() {
  
  return sourcedatabase_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* PK_PASCAL_VOC_ANNOTATION::release_sourcedatabase() {
  // @@protoc_insertion_point(field_release:pb.PK_PASCAL_VOC_ANNOTATION.sourcedatabase)
  
  return sourcedatabase_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void PK_PASCAL_VOC_ANNOTATION::set_allocated_sourcedatabase(std::string* sourcedatabase) {
  if (sourcedatabase != nullptr) {
    
  } else {
    
  }
  sourcedatabase_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), sourcedatabase);
  // @@protoc_insertion_point(field_set_allocated:pb.PK_PASCAL_VOC_ANNOTATION.sourcedatabase)
}

// int32 szWidth = 5;
inline void PK_PASCAL_VOC_ANNOTATION::clear_szwidth() {
  szwidth_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PK_PASCAL_VOC_ANNOTATION::_internal_szwidth() const {
  return szwidth_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PK_PASCAL_VOC_ANNOTATION::szwidth() const {
  // @@protoc_insertion_point(field_get:pb.PK_PASCAL_VOC_ANNOTATION.szWidth)
  return _internal_szwidth();
}
inline void PK_PASCAL_VOC_ANNOTATION::_internal_set_szwidth(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  szwidth_ = value;
}
inline void PK_PASCAL_VOC_ANNOTATION::set_szwidth(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_szwidth(value);
  // @@protoc_insertion_point(field_set:pb.PK_PASCAL_VOC_ANNOTATION.szWidth)
}

// int32 szHeight = 6;
inline void PK_PASCAL_VOC_ANNOTATION::clear_szheight() {
  szheight_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PK_PASCAL_VOC_ANNOTATION::_internal_szheight() const {
  return szheight_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PK_PASCAL_VOC_ANNOTATION::szheight() const {
  // @@protoc_insertion_point(field_get:pb.PK_PASCAL_VOC_ANNOTATION.szHeight)
  return _internal_szheight();
}
inline void PK_PASCAL_VOC_ANNOTATION::_internal_set_szheight(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  szheight_ = value;
}
inline void PK_PASCAL_VOC_ANNOTATION::set_szheight(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_szheight(value);
  // @@protoc_insertion_point(field_set:pb.PK_PASCAL_VOC_ANNOTATION.szHeight)
}

// int32 szDepth = 7;
inline void PK_PASCAL_VOC_ANNOTATION::clear_szdepth() {
  szdepth_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PK_PASCAL_VOC_ANNOTATION::_internal_szdepth() const {
  return szdepth_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PK_PASCAL_VOC_ANNOTATION::szdepth() const {
  // @@protoc_insertion_point(field_get:pb.PK_PASCAL_VOC_ANNOTATION.szDepth)
  return _internal_szdepth();
}
inline void PK_PASCAL_VOC_ANNOTATION::_internal_set_szdepth(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  szdepth_ = value;
}
inline void PK_PASCAL_VOC_ANNOTATION::set_szdepth(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_szdepth(value);
  // @@protoc_insertion_point(field_set:pb.PK_PASCAL_VOC_ANNOTATION.szDepth)
}

// int32 segmented = 8;
inline void PK_PASCAL_VOC_ANNOTATION::clear_segmented() {
  segmented_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PK_PASCAL_VOC_ANNOTATION::_internal_segmented() const {
  return segmented_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PK_PASCAL_VOC_ANNOTATION::segmented() const {
  // @@protoc_insertion_point(field_get:pb.PK_PASCAL_VOC_ANNOTATION.segmented)
  return _internal_segmented();
}
inline void PK_PASCAL_VOC_ANNOTATION::_internal_set_segmented(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  segmented_ = value;
}
inline void PK_PASCAL_VOC_ANNOTATION::set_segmented(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_segmented(value);
  // @@protoc_insertion_point(field_set:pb.PK_PASCAL_VOC_ANNOTATION.segmented)
}

// repeated .pb.PK_PASCAL_VOC_ANNOTATION_OBJ objs = 9;
inline int PK_PASCAL_VOC_ANNOTATION::_internal_objs_size() const {
  return objs_.size();
}
inline int PK_PASCAL_VOC_ANNOTATION::objs_size() const {
  return _internal_objs_size();
}
inline void PK_PASCAL_VOC_ANNOTATION::clear_objs() {
  objs_.Clear();
}
inline ::pb::PK_PASCAL_VOC_ANNOTATION_OBJ* PK_PASCAL_VOC_ANNOTATION::mutable_objs(int index) {
  // @@protoc_insertion_point(field_mutable:pb.PK_PASCAL_VOC_ANNOTATION.objs)
  return objs_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb::PK_PASCAL_VOC_ANNOTATION_OBJ >*
PK_PASCAL_VOC_ANNOTATION::mutable_objs() {
  // @@protoc_insertion_point(field_mutable_list:pb.PK_PASCAL_VOC_ANNOTATION.objs)
  return &objs_;
}
inline const ::pb::PK_PASCAL_VOC_ANNOTATION_OBJ& PK_PASCAL_VOC_ANNOTATION::_internal_objs(int index) const {
  return objs_.Get(index);
}
inline const ::pb::PK_PASCAL_VOC_ANNOTATION_OBJ& PK_PASCAL_VOC_ANNOTATION::objs(int index) const {
  // @@protoc_insertion_point(field_get:pb.PK_PASCAL_VOC_ANNOTATION.objs)
  return _internal_objs(index);
}
inline ::pb::PK_PASCAL_VOC_ANNOTATION_OBJ* PK_PASCAL_VOC_ANNOTATION::_internal_add_objs() {
  return objs_.Add();
}
inline ::pb::PK_PASCAL_VOC_ANNOTATION_OBJ* PK_PASCAL_VOC_ANNOTATION::add_objs() {
  // @@protoc_insertion_point(field_add:pb.PK_PASCAL_VOC_ANNOTATION.objs)
  return _internal_add_objs();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb::PK_PASCAL_VOC_ANNOTATION_OBJ >&
PK_PASCAL_VOC_ANNOTATION::objs() const {
  // @@protoc_insertion_point(field_list:pb.PK_PASCAL_VOC_ANNOTATION.objs)
  return objs_;
}

// -------------------------------------------------------------------

// PK_PASCAL_VOC_SAVE_REQ

// string filename = 1;
inline void PK_PASCAL_VOC_SAVE_REQ::clear_filename() {
  filename_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& PK_PASCAL_VOC_SAVE_REQ::filename() const {
  // @@protoc_insertion_point(field_get:pb.PK_PASCAL_VOC_SAVE_REQ.filename)
  return _internal_filename();
}
inline void PK_PASCAL_VOC_SAVE_REQ::set_filename(const std::string& value) {
  _internal_set_filename(value);
  // @@protoc_insertion_point(field_set:pb.PK_PASCAL_VOC_SAVE_REQ.filename)
}
inline std::string* PK_PASCAL_VOC_SAVE_REQ::mutable_filename() {
  // @@protoc_insertion_point(field_mutable:pb.PK_PASCAL_VOC_SAVE_REQ.filename)
  return _internal_mutable_filename();
}
inline const std::string& PK_PASCAL_VOC_SAVE_REQ::_internal_filename() const {
  return filename_.GetNoArena();
}
inline void PK_PASCAL_VOC_SAVE_REQ::_internal_set_filename(const std::string& value) {
  
  filename_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void PK_PASCAL_VOC_SAVE_REQ::set_filename(std::string&& value) {
  
  filename_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.PK_PASCAL_VOC_SAVE_REQ.filename)
}
inline void PK_PASCAL_VOC_SAVE_REQ::set_filename(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  filename_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.PK_PASCAL_VOC_SAVE_REQ.filename)
}
inline void PK_PASCAL_VOC_SAVE_REQ::set_filename(const char* value, size_t size) {
  
  filename_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.PK_PASCAL_VOC_SAVE_REQ.filename)
}
inline std::string* PK_PASCAL_VOC_SAVE_REQ::_internal_mutable_filename() {
  
  return filename_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* PK_PASCAL_VOC_SAVE_REQ::release_filename() {
  // @@protoc_insertion_point(field_release:pb.PK_PASCAL_VOC_SAVE_REQ.filename)
  
  return filename_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void PK_PASCAL_VOC_SAVE_REQ::set_allocated_filename(std::string* filename) {
  if (filename != nullptr) {
    
  } else {
    
  }
  filename_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), filename);
  // @@protoc_insertion_point(field_set_allocated:pb.PK_PASCAL_VOC_SAVE_REQ.filename)
}

// .pb.PK_PASCAL_VOC_ANNOTATION annotation = 2;
inline bool PK_PASCAL_VOC_SAVE_REQ::_internal_has_annotation() const {
  return this != internal_default_instance() && annotation_ != nullptr;
}
inline bool PK_PASCAL_VOC_SAVE_REQ::has_annotation() const {
  return _internal_has_annotation();
}
inline void PK_PASCAL_VOC_SAVE_REQ::clear_annotation() {
  if (GetArenaNoVirtual() == nullptr && annotation_ != nullptr) {
    delete annotation_;
  }
  annotation_ = nullptr;
}
inline const ::pb::PK_PASCAL_VOC_ANNOTATION& PK_PASCAL_VOC_SAVE_REQ::_internal_annotation() const {
  const ::pb::PK_PASCAL_VOC_ANNOTATION* p = annotation_;
  return p != nullptr ? *p : *reinterpret_cast<const ::pb::PK_PASCAL_VOC_ANNOTATION*>(
      &::pb::_PK_PASCAL_VOC_ANNOTATION_default_instance_);
}
inline const ::pb::PK_PASCAL_VOC_ANNOTATION& PK_PASCAL_VOC_SAVE_REQ::annotation() const {
  // @@protoc_insertion_point(field_get:pb.PK_PASCAL_VOC_SAVE_REQ.annotation)
  return _internal_annotation();
}
inline ::pb::PK_PASCAL_VOC_ANNOTATION* PK_PASCAL_VOC_SAVE_REQ::release_annotation() {
  // @@protoc_insertion_point(field_release:pb.PK_PASCAL_VOC_SAVE_REQ.annotation)
  
  ::pb::PK_PASCAL_VOC_ANNOTATION* temp = annotation_;
  annotation_ = nullptr;
  return temp;
}
inline ::pb::PK_PASCAL_VOC_ANNOTATION* PK_PASCAL_VOC_SAVE_REQ::_internal_mutable_annotation() {
  
  if (annotation_ == nullptr) {
    auto* p = CreateMaybeMessage<::pb::PK_PASCAL_VOC_ANNOTATION>(GetArenaNoVirtual());
    annotation_ = p;
  }
  return annotation_;
}
inline ::pb::PK_PASCAL_VOC_ANNOTATION* PK_PASCAL_VOC_SAVE_REQ::mutable_annotation() {
  // @@protoc_insertion_point(field_mutable:pb.PK_PASCAL_VOC_SAVE_REQ.annotation)
  return _internal_mutable_annotation();
}
inline void PK_PASCAL_VOC_SAVE_REQ::set_allocated_annotation(::pb::PK_PASCAL_VOC_ANNOTATION* annotation) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete annotation_;
  }
  if (annotation) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      annotation = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, annotation, submessage_arena);
    }
    
  } else {
    
  }
  annotation_ = annotation;
  // @@protoc_insertion_point(field_set_allocated:pb.PK_PASCAL_VOC_SAVE_REQ.annotation)
}

// -------------------------------------------------------------------

// PK_PASCAL_VOC_SAVE_RSP

// string errmsg = 1;
inline void PK_PASCAL_VOC_SAVE_RSP::clear_errmsg() {
  errmsg_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& PK_PASCAL_VOC_SAVE_RSP::errmsg() const {
  // @@protoc_insertion_point(field_get:pb.PK_PASCAL_VOC_SAVE_RSP.errmsg)
  return _internal_errmsg();
}
inline void PK_PASCAL_VOC_SAVE_RSP::set_errmsg(const std::string& value) {
  _internal_set_errmsg(value);
  // @@protoc_insertion_point(field_set:pb.PK_PASCAL_VOC_SAVE_RSP.errmsg)
}
inline std::string* PK_PASCAL_VOC_SAVE_RSP::mutable_errmsg() {
  // @@protoc_insertion_point(field_mutable:pb.PK_PASCAL_VOC_SAVE_RSP.errmsg)
  return _internal_mutable_errmsg();
}
inline const std::string& PK_PASCAL_VOC_SAVE_RSP::_internal_errmsg() const {
  return errmsg_.GetNoArena();
}
inline void PK_PASCAL_VOC_SAVE_RSP::_internal_set_errmsg(const std::string& value) {
  
  errmsg_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void PK_PASCAL_VOC_SAVE_RSP::set_errmsg(std::string&& value) {
  
  errmsg_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.PK_PASCAL_VOC_SAVE_RSP.errmsg)
}
inline void PK_PASCAL_VOC_SAVE_RSP::set_errmsg(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  errmsg_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.PK_PASCAL_VOC_SAVE_RSP.errmsg)
}
inline void PK_PASCAL_VOC_SAVE_RSP::set_errmsg(const char* value, size_t size) {
  
  errmsg_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.PK_PASCAL_VOC_SAVE_RSP.errmsg)
}
inline std::string* PK_PASCAL_VOC_SAVE_RSP::_internal_mutable_errmsg() {
  
  return errmsg_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* PK_PASCAL_VOC_SAVE_RSP::release_errmsg() {
  // @@protoc_insertion_point(field_release:pb.PK_PASCAL_VOC_SAVE_RSP.errmsg)
  
  return errmsg_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void PK_PASCAL_VOC_SAVE_RSP::set_allocated_errmsg(std::string* errmsg) {
  if (errmsg != nullptr) {
    
  } else {
    
  }
  errmsg_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), errmsg);
  // @@protoc_insertion_point(field_set_allocated:pb.PK_PASCAL_VOC_SAVE_RSP.errmsg)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace pb

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::pb::PK_PASCAL_VOC_ANNOTATION_OBJ_CMD_PASCAL_VOC_ANNOTATION_OBJ> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::pb::PK_PASCAL_VOC_ANNOTATION_OBJ_CMD_PASCAL_VOC_ANNOTATION_OBJ>() {
  return ::pb::PK_PASCAL_VOC_ANNOTATION_OBJ_CMD_PASCAL_VOC_ANNOTATION_OBJ_descriptor();
}
template <> struct is_proto_enum< ::pb::PK_PASCAL_VOC_ANNOTATION_CMD_PASCAL_VOC_ANNOTATION> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::pb::PK_PASCAL_VOC_ANNOTATION_CMD_PASCAL_VOC_ANNOTATION>() {
  return ::pb::PK_PASCAL_VOC_ANNOTATION_CMD_PASCAL_VOC_ANNOTATION_descriptor();
}
template <> struct is_proto_enum< ::pb::PK_PASCAL_VOC_SAVE_REQ_CMD_PASCAL_VOC_SAVE_REQ> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::pb::PK_PASCAL_VOC_SAVE_REQ_CMD_PASCAL_VOC_SAVE_REQ>() {
  return ::pb::PK_PASCAL_VOC_SAVE_REQ_CMD_PASCAL_VOC_SAVE_REQ_descriptor();
}
template <> struct is_proto_enum< ::pb::PK_PASCAL_VOC_SAVE_RSP_CMD_PASCAL_VOC_SAVE_RSP> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::pb::PK_PASCAL_VOC_SAVE_RSP_CMD_PASCAL_VOC_SAVE_RSP>() {
  return ::pb::PK_PASCAL_VOC_SAVE_RSP_CMD_PASCAL_VOC_SAVE_RSP_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_api_2eproto
